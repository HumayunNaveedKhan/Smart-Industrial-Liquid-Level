#include <ESP8266WiFi.h>
#include <WiFiClientSecure.h>
#include <EEPROM.h>
#include <ESP8266WebServer.h>
#include <Tiny4kOLED.h>

// Pins
#define PIN_IN1 14 // Trigger pin for ultrasonic sensor
#define PIN_IN2 12 // Echo pin for ultrasonic sensor

// Wi-Fi Credentials
#define EEPROM_SIZE 96 // Enough to store two strings (SSID and Password)
char storedSSID[32] = ""; // Stored SSID
char storedPassword[64] = ""; // Stored Password
const char* defaultSSID = "CoatsEmployee"; // Default SSID
const char* defaultPassword = "Coats@1234"; // Default Password

// Flags and Variables
bool wifiConnected = false;
double distance = 0;
ESP8266WebServer server(80);
WiFiClientSecure client;

// Constants
const char* host = "script.google.com";
const int httpsPort = 443;
String GAS_ID = "AKfycbxQWPcQQWIC7ZKKwZodd1e7lqPcqmkUvEyBZJtA7PCztU5LDZ_hcFYeBEAvdKWQeyGNbA";
unsigned long previousMillis = 0;
const long interval = 60000; // 5 minutes

void setup() {
    Serial.begin(115200);

    // Initialize OLED
    oled.begin(128, 64, sizeof(tiny4koled_init_128x64br), tiny4koled_init_128x64br);
    oled.on();
    oled.setRotation(1);
    oled.setFont(FONT8X16);
    oled.clear();
    oled.setCursor(30, 3);
    oled.print("NED-SILL");
    delay(2000);
    oled.clear();

    pinMode(PIN_IN1, OUTPUT);
    pinMode(PIN_IN2, INPUT);

    // Initialize EEPROM
    EEPROM.begin(EEPROM_SIZE);

    // Load stored Wi-Fi credentials
    loadWiFiCredentials();

    // Try connecting to Wi-Fi
    connectToWiFi();

    // If no Wi-Fi connection, start AP mode with a time limit
    if (!wifiConnected) {
        unsigned long apStartTime = millis(); // Record the start time
        while (millis() - apStartTime < 20000) { // Run AP mode for 10 seconds
            startAccessPoint();
            server.handleClient(); // Handle any client requests during AP mode
            delay(1000); // Wait 1 second per iteration
        }
        oled.clear();
        oled.setFont(FONT6X8);
        oled.setCursor(20, 30);
        oled.print("Exiting AP Mode...");
        delay(2000);
    }
}

void loop() {
    unsigned long currentMillis = millis();

    if (currentMillis - previousMillis >= interval) {
        previousMillis = currentMillis;

        measureDistance();

        if (wifiConnected) {
            sendDataToGoogleSheets(distance); // Send data if Wi-Fi is connected
        }

        displayLabel(distance); // Always display the label
    }
}
void measureDistance() {
  digitalWrite(PIN_IN1, LOW);
  delayMicroseconds(2);
  digitalWrite(PIN_IN1, HIGH);
  delayMicroseconds(300);
  digitalWrite(PIN_IN1, LOW);

  long duration = pulseIn(PIN_IN2, HIGH);
  distance = (duration * 0.034 / 2) / (2.54 * 12); // Distance in feet
}

void displayLabel(double distance) {
  String label = (distance < 1.5) ? "Full" : (distance <= 3) ? "Almost Full"
                 : (distance <= 4) ? "Almost Half" : (distance <= 5) ? "Half"
                 : (distance <= 6) ? "Less than Half" : (distance <= 8) ? "Almost Empty"
                 : (distance <= 14) ? "Empty" : "Unknown";

  oled.clear();
  oled.setFont(FONT6X8);
  oled.setCursor(90, 0);
  oled.print(wifiConnected ? "Conn!" : "DisConn!");
  oled.setFont(FONT8X16);
  oled.setCursor(10, 18);
  oled.print(distance, 2);
  oled.print(" ft");
  oled.setCursor(10, 30);
  oled.print(label);
}

bool sendDataToGoogleSheets(double measurement) {
  if (!client.connect(host, httpsPort)) {
    return false;
  }

  String url = "/macros/s/" + GAS_ID + "/exec?value0=" + String(measurement);
  client.print(String("GET ") + url + " HTTP/1.1\r\nHost: " + host +
               "\r\nUser-Agent: ESP8266\r\nConnection: close\r\n\r\n");
  return true;
}

void connectToWiFi() {
    oled.clear();
    oled.setCursor(5, 10);
    oled.print("Connecting...");

    // Attempt to connect using stored or default credentials
    WiFi.mode(WIFI_STA);
    WiFi.begin(strlen(storedSSID) > 0 ? storedSSID : defaultSSID,
               strlen(storedSSID) > 0 ? storedPassword : defaultPassword);

    int attempts = 0;
    while (WiFi.status() != WL_CONNECTED && attempts < 20) {
        delay(500);
        oled.setCursor(5, 20);
        oled.print("Attempt: " + String(attempts + 1));
        attempts++;
    }

    wifiConnected = (WiFi.status() == WL_CONNECTED);

    if (wifiConnected) {
        oled.clear();
        oled.setCursor(5, 10);
        oled.print("Wi-Fi Connected");
        delay(2000); // Show for 2 seconds
        oled.clear(); // Clear after showing the message
        client.setInsecure();
    } else {
        oled.clear();
        oled.setCursor(5, 10);
        oled.print("Wi-Fi Failed");
        delay(2000); // Show for 2 seconds
        oled.clear(); // Clear after showing the message
    }
}


void startAccessPoint() {
  WiFi.mode(WIFI_AP);
  WiFi.softAP("NED-SILL-Setup", "00000000");

  IPAddress ip = WiFi.softAPIP();
  oled.clear();
  oled.setFont(FONT6X8);
  oled.setCursor(5, 14);
  oled.print("AP Mode");
  oled.setCursor(5, 10);
  oled.print("PW: 00000000");
  oled.setCursor(5, 24);
  oled.print("SSID: NED-SILL-Setup");
  oled.setCursor(5, 12);
  oled.print("IP: " + ip.toString());

  server.on("/", handlePortal);
  server.begin();
}


void handlePortal() {
  if (server.method() == HTTP_POST) {
    String ssid = server.arg("ssid");
    String password = server.arg("password");

    // Save the credentials to EEPROM
    strncpy(storedSSID, ssid.c_str(), sizeof(storedSSID));
    strncpy(storedPassword, password.c_str(), sizeof(storedPassword));
    saveWiFiCredentials();

    server.send(200, "text/html", R"rawliteral(
      <!doctype html>
      <html>
      <head>
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <style>
          body {
            font-family: Arial, sans-serif;
            text-align: center;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #f0f0f0;
          }
          .container {
            background: white;
            padding: 20px;
            box-shadow: 0px 4px 10px rgba(0,0,0,0.1);
            border-radius: 10px;
            width: 90%;
            max-width: 400px;
          }
          h1 {
            margin-bottom: 10px;
            color: #333;
          }
          p {
            margin-bottom: 20px;
            color: #666;
          }
          input {
            width: calc(100% - 20px);
            padding: 10px;
            margin: 10px 0;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
          }
          button {
            background-color: #007bff;
            color: white;
            padding: 10px;
            width: 100%;
            border: none;
            border-radius: 5px;
            font-size: 18px;
            cursor: pointer;
          }
          button:hover {
            background-color: #0056b3;
          }
          footer {
            margin-top: 20px;
            font-size: 12px;
            color: #aaa;
          }
        </style>
      </head>
      <body>
        <div class="container">
          <h1>Wi-Fi Setup</h1>
          <p>Enter your Wi-Fi SSID and Password</p>
          <form method="POST" action="/">
            <input type="text" name="ssid" placeholder="SSID" required>
            <input type="password" name="password" placeholder="Password" required>
            <button type="submit">Save</button>
          </form>
          <footer>&copy; 2025 NED-SILL</footer>
        </div>
      </body>
      </html>
    )rawliteral");
    delay(1000);
    ESP.restart();
  } else {
    server.send(200, "text/html", R"rawliteral(
      <!doctype html>
      <html>
      <head>
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <style>
          body {
            font-family: Arial, sans-serif;
            text-align: center;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #f0f0f0;
          }
          .container {
            background: white;
            padding: 20px;
            box-shadow: 0px 4px 10px rgba(0,0,0,0.1);
            border-radius: 10px;
            width: 90%;
            max-width: 400px;
          }
          h1 {
            margin-bottom: 10px;
            color: #333;
          }
          p {
            margin-bottom: 20px;
            color: #666;
          }
          input {
            width: calc(100% - 20px);
            padding: 10px;
            margin: 10px 0;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
          }
          button {
            background-color: #007bff;
            color: white;
            padding: 10px;
            width: 100%;
            border: none;
            border-radius: 5px;
            font-size: 18px;
            cursor: pointer;
          }
          button:hover {
            background-color: #0056b3;
          }
          footer {
            margin-top: 20px;
            font-size: 12px;
            color: #aaa;
          }
        </style>
      </head>
      <body>
        <div class="container">
          <h1>Wi-Fi Setup</h1>
          <p>Enter your Wi-Fi SSID and Password</p>
          <form method="POST" action="/">
            <input type="text" name="ssid" placeholder="SSID" required>
            <input type="password" name="password" placeholder="Password" required>
            <button type="submit">Save</button>
          </form>
          <footer>&copy; 2025 NED-SILL</footer>
        </div>
      </body>
      </html>
    )rawliteral");
  }
}


void loadWiFiCredentials() {
  for (int i = 0; i < sizeof(storedSSID); i++) {
    storedSSID[i] = char(EEPROM.read(i));
  }
  for (int i = 0; i < sizeof(storedPassword); i++) {
    storedPassword[i] = char(EEPROM.read(i + sizeof(storedSSID)));
  }
}

void saveWiFiCredentials() {
  for (int i = 0; i < sizeof(storedSSID); i++) {
    EEPROM.write(i, storedSSID[i]);
  }
  for (int i = 0; i < sizeof(storedPassword); i++) {
    EEPROM.write(i + sizeof(storedSSID), storedPassword[i]);
  }
  EEPROM.commit();
}
