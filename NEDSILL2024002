#include <ESP8266WiFi.h>
#include <WiFiClientSecure.h>
#include <Arduino.h>
//#include <RotaryEncoder.h>
#include <Tiny4kOLED.h>

#define PIN_IN1 14//trig
#define PIN_IN2 12 //echo

double distance = 0;  // Initialize distance
bool dataSentSuccessfully = false;  // Flag to track whether data was sent successfully or not
bool wifiConnected = false;  // Flag to track Wi-Fi connection status

const char* ssid = "MEB1"; // Your Wi-Fi name or SSID
const char* password = "Meb@786.1"; // Your Wi-Fi password
    double distanceInCm, distanceInInches, distanceInFeet;
unsigned long previousMillis = 0;
const long interval = 2000;  // Interval for distance measurement and data logging (in milliseconds)

const char* host = "script.google.com";
const int httpsPort = 443;
String GAS_ID = "AKfycbzL6yE9_8zaYX8YYqOFUoTjhpJcaBJ7ZWXyZxU7AGiovsNci2ue8WwQ3vh__MPGHAhkXw";
//https://script.google.com/macros/s//dev// Replace with your spreadsheet script ID
//AKfycbzB7-zLt4ot-1j8LJjUBVJlngxhd2eLW3CC_dCuY_k
IPAddress localIP;
WiFiClientSecure client; // Create a WiFiClientSecure object

void setup() {
  Serial.begin(115200);
  oled.begin(128, 64, sizeof(tiny4koled_init_128x64br), tiny4koled_init_128x64br);
  oled.on();
  oled.setRotation(1);
  oled.setFont(FONT8X16); // Set font for status indicator
  oled.clear();
  oled.setCursor(30, 3);
  oled.print("NED-ILLM");
  delay(2000);
  oled.setFont(FONT6X8); // Set font for status indicator
  oled.setCursor(75, 0); // Position status indicator
  oled.print("DisConn!"); // Initially set to disconnected
  //delay(1000);
  oled.clear();
  pinMode(PIN_IN1, OUTPUT);
  pinMode(PIN_IN2, INPUT);
 
  
  //while (!wifiConnected) {
    connectToWiFi();
    //delay(500);
  //}
  oled.setCursor(35, 70);
  oled.print("Connecting...");
  // while (WiFi.status() != WL_CONNECTED) {
  //   //Serial.print(".");
  // }
  //wifiConnected = true;
  //delay(100);
  //oled.clear();
  oled.setCursor(90, 80);
  oled.print("Conn.!");
  client.setInsecure();

  oled.clear();
  oled.setCursor(30, 70);
  oled.print("initializing....");    //oled.setFont(FONT8X16);
      //oled.setCursor(10, 0);
      //oled.print("Distance:");
      //oled.setCursor(0, 16);
      //oled.print(distanceInFeet, 2); // Display distance in feet with one decimal place
      //oled.print(" ft ");
  delay(1000);
  oled.clear();
  oled.setFont(FONT8X16);
  oled.setCursor(10, 18);
  //oled.print("Distance: ");
  oled.print(distance, 2);
  oled.print(" ft");
  oled.setCursor(10, 20);
  //oled.print(label);    
  
}

void loop() {
    unsigned long currentMillis = millis();
  //if (WiFi.status() != WL_CONNECTED) {
    //connectToWiFi();
  //}
    long duration;

  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;

    digitalWrite(PIN_IN1, LOW);
    delayMicroseconds(2);
    digitalWrite(PIN_IN1, HIGH);
    delayMicroseconds(300);
    digitalWrite(PIN_IN1, LOW);

    duration = pulseIn(PIN_IN2, HIGH);

    distanceInCm = duration * 0.034 / 2;
    distanceInFeet = distanceInCm / (2.54 * 12); 

    sendDataToGoogleSheets(distanceInFeet);
    displayLabel(distanceInFeet);
    //delay(3000);
    //oled.clear();
    //delay(1000);
  }
}

void displayLabel(double distance) {
  String label;
  if (distance < 1.5) {
    label = "Full";
  } else if (distance <= 4) {
    label = "Almost Full";
  } else if (distance <= 6) {
    label = "Almost Half";
  } else if (distance <= 9) {
    label = "Half";
  } else if (distance <= 12) {
    label = "Less than Half";
  } else if (distance <= 15) {
    label = "Almost Empty";
  } else if (distance <= 19.6) {
    label = "Empty";
  } else {
    label = "Unknown"; // This is just a placeholder, you can change it to fit your needs
  }

  // Clear OLED display
  oled.clear();
  oled.setFont(FONT6X8);
  
  // Display Wi-Fi connection status
  if (wifiConnected) {
    oled.setCursor(90, 0); // Position for "Conn!"
    oled.print("Conn!");
  } else {
    oled.setCursor(70, 0); // Position for "DisConn!"
    oled.print("DisConn!");
  }

  // Display distance information
  oled.setFont(FONT8X16);
  oled.setCursor(10, 18);
  //oled.print("Distance: ");
  oled.print(distance, 2);
  oled.print(" ft");
  oled.setCursor(10, 20);
  oled.print(label);
}

bool sendDataToGoogleSheets(double measurement) {
  if (!client.connect(host, httpsPort)) {
    return 0;
  }
  String string_measurement = String(measurement);

  // Display parameter type and measurement on the OLED
  ///oled.setFont(FONT8X16);
  //oled.setCursor(5, 10);
  //oled.print(string_measurement);
  //oled.print(" ft");
  //delay(500); // Adjust the delay if needed for better visibility
  //oled.clear();
  //oled.setCursor(90, 80);
  //oled.print("Conn.!");

  String url;

  url = "/macros/s/" + GAS_ID + "/exec?value0=" + string_measurement;

  // Ensure correct rollover for sequentialValue

  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: BuildFailureDetectorESP8266\r\n" +
               "Connection: close\r\n\r\n");
  return 0;
}

void connectToWiFi() {
  //oled.clear();
  oled.setCursor(5, 10);
  oled.print("Connecting to WiFi..");
  
  WiFi.begin(ssid, password);
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {
    delay(500);
    oled.setFont(FONT8X16);
    oled.setCursor(5,60);
    oled.print(attempts);
    attempts++;
    oled.setFont(FONT6X8);
  }

  if (WiFi.status() == WL_CONNECTED) {
    wifiConnected = true;
    oled.clear();
    oled.setCursor(5, 10);
    oled.print("Connected to WiFi!");
    delay(1000);
    oled.clear();
    oled.setCursor(90, 80);
    oled.print("Conn.!");
    client.setInsecure();
  } else {
    wifiConnected = false;
    oled.clear();
    oled.setCursor(5, 10);
    oled.print("Failed to connect to WiFi");
    delay(1000);
    oled.clear();
  }
}
